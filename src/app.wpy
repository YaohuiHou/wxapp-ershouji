<style lang="less">
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
@font-face {
  font-family: 'TieJia'; /* project id 650544 */
  src: url('//at.alicdn.com/t/font_650544_ia2damzotuvdkj4i.eot');
  src: url('//at.alicdn.com/t/font_650544_ia2damzotuvdkj4i.eot?#iefix')
      format('embedded-opentype'),
    url('//at.alicdn.com/t/font_650544_ia2damzotuvdkj4i.woff') format('woff'),
    url('//at.alicdn.com/t/font_650544_ia2damzotuvdkj4i.ttf') format('truetype'),
    url('//at.alicdn.com/t/font_650544_ia2damzotuvdkj4i.svg#iconfont')
      format('svg');
}
</style>

<script>
// require('./utils/sensorsdata.js')
const ALD = require('./utils/ald-stat.js')
import sensors from './utils/sensorsdata.js'
import wepy from 'wepy'
import 'wepy-async-function'

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/detail',
      'pages/serve',
      'pages/screen',
      'pages/loans',
      'pages/city'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '铁甲二手机',
      navigationBarTextStyle: 'black'
    }
  }

  globalData = {
    userInfo: null
  }
  sensors = sensors
  constructor() {
    super()
    this.use('requestfix')
    this.use('promisify')
  }
  onLaunch(option) {
    this.sceneFun(option)
    this.testAsync()
    // 公共属性
    this.sensors.register({
      app_name: '二手机小程序',
      app_version: '2.0'
    })
  }
  onShow() {}

  // 场景值
  sceneFun(option) {
    try {
      if (option.scene === 1023) {
        wepy.setStorageSync('sceneText', 'scene1023')
      } else {
        wx.getSystemInfo({
          success: function(res) {
            if (res.model.indexOf('iPhone') != -1) {
              wepy.setStorageSync('sceneText', 'scene1023')
            }
          }
        })
      }
    } catch (error) {}
  }

  sleep(s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync() {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success(res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
}
</script>
